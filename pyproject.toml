[tool.poetry]
name = "python_package"
version = "0.0.0"
description = "Hyper-modern python package framework."
authors = ["Jennings Fantini <jennings@humblfinance.io>"]
readme = "README.md"
license = "Proprietary"
keywords = ["python", "package", "template", "modern"]
packages = [
    { include = "python_package", from = "src" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11"
]

[tool.poetry.dependencies]
python = ">=3.9.10,<=3.12.0"
polars = "^0.19.3"
pyarrow = "^14.0.0"
pandera = {extras = ["io"], version = "^0.17.2"}
toml = "^0.10.2"
pydantic = "^2.5.1"


[tool.poetry.group.dev.dependencies]
commitizen = "^3.12.0"
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
black = "^23.9.1"
pytest-mock = "^3.12.0"
ipython = "^8.17.2"
comm = "^0.2.0"
ruff = "^0.1.6"
nox = "^2023.4.22"
tqdm = "^4.66.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_customize"
version = "0.0.0"
tag_format = "v$version"
update_changelog_on_bump = true
annotated_tag = true
major_version_zero = true
version_files = [
    "pyproject.toml:^version",
    #"./src/python_package/__version__.py"
]
path = ".cz-config.js"


[tool.ruff]
line-length = 80
select = [
"E",   # pycodestyle
"F",   # pyflakes
"UP",  # pyupgrade,
"I",   # isort
"B",   # bugbear
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

[tool.ruff.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10.
max-complexity = 10


[project.urls]
Documentation = "https://github.com/microsoft/python-package-template/tree/main#readme"
Source = "https://github.com/microsoft/python-package-template"
Tracker = "https://github.com/microsoft/python-package-template/issues"



[tool.black]
line-length = 120
fast = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.flake8]
max-line-length = 80
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "swagger_client"
]
ignore = [
    "E722",
    "B001",
    "W503",
    "E203"
]

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
venv = "env37"
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.7"
pythonPlatform = "Linux"
executionEnvironments = [
  { root = "src" }
]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append -m 'not integration'"
pythonpath = [
  "src"
]
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]